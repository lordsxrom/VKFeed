//
//  NewsFeedInteractor.swift
//  VKFeed
//
//  Created by Nikita Shumskii on 18.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsFeedBusinessLogic {
    func makeRequest(request: NewsFeed.Model.Request.RequestType)
}

protocol NewsFeedDataStore {
    //var name: String { get set }
}

class NewsFeedInteractor: NewsFeedBusinessLogic, NewsFeedDataStore {
    
    var presenter: NewsFeedPresentationLogic?
    var service: NewsFeedService?
    
    func makeRequest(request: NewsFeed.Model.Request.RequestType) {
        if service == nil {
            service = NewsFeedService()
        }
        
        switch request {
        case .getNewsFeed:
            service?.getFeed(complition: {[weak self] (reveledPostIds, feed) in
                self?.presenter?.presentData(response: .presentNewsFeed(feed: feed, reveledPostIds: reveledPostIds))
            })
        case .getUser:
            service?.getUser(complition: {[weak self] (user) in
                self?.presenter?.presentData(response: .presentUserInfo(userResponse: user))
            } )
        case .revealPostId(postId: let postId):
            service?.revealPostId(forPostId: postId, complition:{[weak self] (reveledPostIds, feed) in
                self?.presenter?.presentData(response: .presentNewsFeed(feed: feed, reveledPostIds: reveledPostIds))
            })
        case .getNextBatch:
            self.presenter?.presentData(response: .presentFooterLoader)
            service?.getNextBatch(complition: {[weak self] (reveledPostIds, feed) in
                self?.presenter?.presentData(response: .presentNewsFeed(feed: feed, reveledPostIds: reveledPostIds))
            })
        }
    }
}
