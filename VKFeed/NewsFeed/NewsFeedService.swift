//
//  NewsFeedService.swift
//  VKFeed
//
//  Created by Nikita Shumskii on 18.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

class NewsFeedService {
    
    private let authService: AuthService
    private let networking: Networking
    private let fetcher: DataFetcher
    
    private var feedResponse: FeedResponse?
    private var reveledPostIds = [Int]()
    private var newFromInProcess: String?
    
    init() {
        self.authService = SceneDelegate.shared().authService
        self.networking = NetworkService(authService: authService)
        self.fetcher = NetworkDataFetcher(networking: networking)
    }
    
    func getUser(complition: @escaping (UserResponse?) -> Void) {
        fetcher.getUser { (userResponse) in
            complition(userResponse)
        }
    }
    
    func getFeed(complition: @escaping ([Int], FeedResponse) -> Void) {
        fetcher.getFeed(nextBatchFrom: nil) { [weak self] (feedResponse) in
            self?.feedResponse = feedResponse
            guard let feedResponse = self?.feedResponse else { return }
            complition(self!.reveledPostIds, feedResponse)
        }
    }
    
    func revealPostId(forPostId postId: Int, complition: @escaping ([Int], FeedResponse) -> Void) {
        reveledPostIds.append(postId)
        guard let feedResponse = self.feedResponse else { return }
        complition(reveledPostIds, feedResponse)
    }
    
    func getNextBatch(complition: @escaping ([Int], FeedResponse) -> Void) {
        newFromInProcess = feedResponse?.nextFrom
        fetcher.getFeed(nextBatchFrom: newFromInProcess) { [weak self] (feedResponse) in
            guard let feedResponse = feedResponse else { return }
            guard self?.feedResponse?.nextFrom != feedResponse.nextFrom else { return }
            
            if self?.feedResponse == nil {
                self?.feedResponse = feedResponse
            } else {
                let items = (self?.feedResponse?.items ?? []) + feedResponse.items
                
                var profiles = feedResponse.profiles
                if let oldProfiles = self?.feedResponse?.profiles {
                    let oldProfilesFiltered = oldProfiles.filter ({ (oldProfile) -> Bool in
                        !feedResponse.profiles.contains { $0.id == oldProfile.id }
                    })
                    profiles.append(contentsOf: oldProfilesFiltered)
                }
                
                var groups = feedResponse.groups
                if let oldGroups = self?.feedResponse?.groups {
                    let oldGroupsFiltered = oldGroups.filter ({ (oldGroup) -> Bool in
                        !feedResponse.groups.contains { $0.id == oldGroup.id }
                    })
                    groups.append(contentsOf: oldGroupsFiltered)
                }
                
                self?.feedResponse = FeedResponse(
                    items: items,
                    profiles: profiles,
                    groups: groups,
                    nextFrom: feedResponse.nextFrom
                )
            }
            
            guard let feedResponse = self?.feedResponse else { return }
            
            complition(self!.reveledPostIds, feedResponse)
        }
    }
    
}
